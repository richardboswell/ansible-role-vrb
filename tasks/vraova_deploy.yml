#
#  Copyright 2015 VMware, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
---
- name: Check if Vra Instance exists
  ignore_errors: yes
  local_action:
    module: vcenter_query
    host: "{{ mgmt_vc }}"
    login: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    port: "{{ mgmt_vc_port }}"
    resourcename: "{{ vra_name }}"
    resourcevarname: "{{vra_name }}"
    resourcetype: 'vm'
    getfacts: 'yes'
  register: vra_exists

- name: debug checking vra Instance if exists
  debug: var=vra_exists
  when: vra_exists.changed is defined

- name: Destroying existing appliance
  ignore_errors: True
  vsphere_guest:
    vcenter_hostname: "{{ mgmt_vc }}"
    username: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    guest: "{{ vra_name }}"
    state: absent
    force: yes
  register: vra_deleted
  when: vra_exists.changed is defined and "{{vra_delete}}"== "1"

- name: debug delete instance
  debug: var=vra_deleted

- name: Deploy  ova through Python
  ignore_errors: yes
  local_action:
    module: ova_deploy
    power_on: "{{vra_poweron}}"
    vcenter_props:
      vcenter_host: "{{ mgmt_vc }}"
      vcenter_port: "{{ mgmt_vc_port }}"
      vcenter_user: "{{ mgmt_vc_username|urlencode }}"
      vcenter_password: "{{ mgmt_vc_password|urlencode }}"
    location_props:
      resource_name: "{{ vra_name }}"
      datacenter: "{{ mgmt_vc_datacenter }}"
      network: "{{ vra_network }}"
      cluster: "{{ mgmt_vc_cluster }}"
      data_store: "{{ vra_datastore }}"
    ova_props:
      ova_directory: "{{ vra_ova_location }}"
      ova_name: "{{ vra_ova }}"
    additional_props:
      diskMode: 'thin'
      ipProtocol: 'IPv4'
    resource_props:
      varoot-password: "{{vra_root_password}}"
      va-ssh-enabled: "{{vra_ssh_enabled}}"
      vami.hostname: "{{vra_host_name}}"
    option_props:
      - acceptAllEulas
      - allowExtraConfig
      - noSSLVerify
  register: vra_ova_deploy
  when: not vra_exists.changed is defined or vra_deleted.changed

- name: Check if Vra Instance is created in vcenter
  ignore_errors: yes
  local_action:
    module: vcenter_query
    host: "{{ mgmt_vc }}"
    login: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    port: "{{ mgmt_vc_port }}"
    resourcename: "{{ vra_name }}"
    resourcevarname: "{{vra_name }}"
    resourcetype: 'vm'
    getfacts: 'yes'
  register: vra_created
  when: not vra_exists.changed is defined or vra_deleted.changed

- name: debug checking vra Instance is created
  debug: var=vra_created

